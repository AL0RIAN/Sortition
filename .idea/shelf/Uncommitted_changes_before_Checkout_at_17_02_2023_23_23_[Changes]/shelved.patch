Index: algorithm.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import math\r\nimport random\r\n\r\n\r\nclass Athlete:\r\n    '''\r\n    Maybe it's temporary, but now it's the main class, which\r\n    representing the athlete.\r\n    '''\r\n\r\n    def __init__(self, name, age, weight, score):\r\n        self.name = name\r\n        self.age = age\r\n        self.weight = weight\r\n        self.score = score\r\n\r\n    def __lt__(self, other):\r\n        return self.age < other.age\r\n\r\n    def __str__(self):\r\n        return f\"{self.name}\"\r\n\r\n\r\ndef sorter(list_main: list) -> list:\r\n    '''\r\n    Use sorter to sort general list of athletes\r\n    by weight group.\r\n    :param list_main: general list of athletes that we get after output from the file\r\n    :return: two-dimensional list of athletes in where each nested list contains athletes of the same weight group\r\n    '''\r\n    list_return = []  # list which will return for further work with it\r\n    for i in range(len(list_of_age)):\r\n        list_of_w = []  # built-in list filled in by students of the same weight group\r\n        for j in range(len(list_main)):\r\n            if list_of_age[i - 1] < int(list_main[j].age) < list_of_age[i]:\r\n                list_of_w.append(list_main[j])\r\n        list_return.append(list_of_w)\r\n    return list_return\r\n\r\n\r\ndef randomizer(list_main: list, element: list, save_list: list):\r\n    '''\r\n    Use randomize to sort athletes of the\r\n    same weight group in their first fight.\r\n    :param list_main: the main list that we will sort\r\n    :param element: a helper list that use to get the correct output\r\n    :param save_list: a list in which enter our athletes in a random order\r\n    '''\r\n    list_spare = list_main.copy()  # use a copy of the main list in order not to change it\r\n    index = 0\r\n\r\n    for i in range(math.ceil(len(list_main) / 2)):\r\n        Kira = random.choice(list_spare)  # first opponent\r\n        del list_spare[list_spare.index(Kira)]\r\n        L = random.choice(list_spare)  # second opponent\r\n        del list_spare[list_spare.index(L)]\r\n\r\n        element[index] = Kira  # adding athletes in the\r\n        save_list.append(Kira)  # correct order to the sorted list\r\n        element[index + 2] = L\r\n        save_list.append(L)\r\n        index += 4\r\n\r\n        if len(list_spare) == 1:  # if there is only one athlete left on the list\r\n            save_list.append(list_spare[0])\r\n            break\r\n\r\n\r\ndef next_iteration(element: list, list: list, dividers: list):\r\n    \"\"\"\r\n    Use next iteration to output the next\r\n    steps of the tournament tree.\r\n    :param element: a helper list that use to get the correct output\r\n    :param list: the main list that we will change\r\n    :param dividers: list of dividers\r\n    \"\"\"\r\n    flag = len(list)  # length of inputting list, because list is changes\r\n    for i in range(flag // 2):  # we leave in the list of winners of the last round\r\n        if i == len(list):\r\n            break\r\n        if list[i].score > list[i + 1].score:\r\n            list.pop(int(i + 1))\r\n        else:\r\n            list.pop(int(i))\r\n\r\n    divider = 0  # the divider will be used to determine the stage of tournament tree\r\n    for i in range(len(element)):  # definition divider for stage of tournament tree\r\n        if type(element[i]) == int:\r\n            for j in range(len(dividers)):\r\n                if element[i] % dividers[j] == 0:\r\n                    divider = dividers[j]\r\n                    break\r\n            break\r\n\r\n    index = 0\r\n    for i in range(len(element)):  # adding athletes definite position in the list\r\n        if type(element[i]) == int:\r\n            if element[i] % divider == 0:\r\n                element[i] = list[index]\r\n                index += 1\r\n            if index == len(list):\r\n                break\r\n\r\n\r\nif __name__ == '__main__':\r\n    list_of_age = [27, 30, 33, 36, 39, 42, 45, 48, 52, 56]\r\n\r\n    list = []\r\n    first = Athlete(\"Babodzaki\", 38, 70, 3)\r\n    second = Athlete(\"Malenia\", 37, 56, 4)\r\n    third = Athlete(\"Radan\", 37, 100, 4)\r\n    fourth = Athlete(\"Godri\", 38, 74, 2)\r\n    fifth = Athlete(\"Rennie\", 37, 25, 5)\r\n    sixth = Athlete(\"Renala\", 37, 60, 1)\r\n    seventh = Athlete(\"Godwin\", 37, 80, 2)\r\n    eighth = Athlete(\"Tif\", 37, 54, 9)\r\n\r\n    list.append(first)\r\n    list.append(second)\r\n    list.append(third)\r\n    list.append(fourth)\r\n    list.append(fifth)\r\n    list.append(sixth)\r\n    list.append(seventh)\r\n    list.append(eighth)\r\n\r\n    list_sorted = sorter(list)\r\n\r\n    element = [2, 9, 10, 25, 30, 33, 40, 49, 62, 63, 64, 65, 92, 93, 94]  # static list needed for the correct output\r\n    # of the tournament tree\r\n    escape = [0, 9, 0, 18, 0, 9, 0, 27, 0, 9, 0, 18, 0, 9, 0]  # temporary auxiliary list\r\n    dividers = [2, 3, 5, 7]  # static array to define the stage in the tournament grid\r\n    save = []\r\n    randomizer(list_sorted[4], element, save)\r\n\r\n    next_iteration(element, save, dividers)\r\n    next_iteration(element, save, dividers)\r\n    next_iteration(element, save, dividers)\r\n\r\n    for i in range(15):  # temporary output to the console\r\n        for j in range(escape[i]):\r\n            print(\" \", end='')\r\n        if type(element[i]) == int:\r\n            print('')\r\n            continue\r\n        print(element[i])\r\n
===================================================================
diff --git a/algorithm.py b/algorithm.py
--- a/algorithm.py	
+++ b/algorithm.py	
@@ -143,4 +143,4 @@
         if type(element[i]) == int:
             print('')
             continue
-        print(element[i])
+        print(element[i])
\ No newline at end of file
