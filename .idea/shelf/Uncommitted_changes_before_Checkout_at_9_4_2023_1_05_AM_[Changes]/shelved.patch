Index: sorting/athlete.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+># __all__ = [\"Athlete\", \"all\"]\r\n__all__ = [\"Athlete\"]\r\n\r\nimport json\r\nfrom typing import Dict\r\n\r\n\r\nclass Athlete:\r\n    def __init__(self, args: dict):\r\n        self.name = args[\"name\"]\r\n        self.birthday = args[\"birthday\"]\r\n        self.gender = args[\"gender\"]\r\n        self.weight = args[\"weight\"]\r\n\r\n    def toJson(self):\r\n        return json.dumps(self, default=lambda o: o.__dict__)\r\n\r\n# all = [[Athlete(\"Babodzaki\", 2), Athlete(\"Malenia\", 16)],\r\n#        [Athlete(\"Radan\", 4), Athlete(\"Godri\", 2)],\r\n#        [Athlete(\"Rennie\", 5), Athlete(\"Renala\", 1)],\r\n#        [Athlete(\"Godwin\", 2), Athlete(\"Tif\", 9)],\r\n#        [Athlete(\"Kirill\", 3), Athlete(\"Bob\", 4)],\r\n#        [Athlete(\"Yarik\", 2), Athlete(\"Rob\", 9)],\r\n#        [Athlete(\"Timo\", 2), Athlete(\"Cop\", 9)],\r\n#        [Athlete(\"Andrey\", 2), Athlete(\"Grob\", 9)]]\r\n
===================================================================
diff --git a/sorting/athlete.py b/sorting/athlete.py
--- a/sorting/athlete.py	
+++ b/sorting/athlete.py	
@@ -11,6 +11,14 @@
         self.birthday = args["birthday"]
         self.gender = args["gender"]
         self.weight = args["weight"]
+        self.category = args["category"]
+        self.is_sanda = args["is_sanda"]
+        self.is_cinda = args["is_cinda"]
+        self.is_tuishou = args["is_tuishou"]
+        self.is_vinchun = args["is_vinchun"]
+        self.region = args["region"]
+        self.club = args["club"]
+        self.trainer = args["trainer"]
 
     def toJson(self):
         return json.dumps(self, default=lambda o: o.__dict__)
Index: IO/export/export_docx.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>from docx import Document #Main python DOCX class\r\nfrom docx.shared import Pt, Cm #Points, Centimeters\r\nfrom docx.enum.text import WD_PARAGRAPH_ALIGNMENT #Paragraph alignment\r\nfrom docx.oxml.shared import OxmlElement, qn #Magic\r\nfrom os import path as os_path #Working with external files\r\n\r\n'''\r\nSample data.\r\nContains test data, that can be exported in DOCX file.\r\n\r\n:param start-date - The day tournament is starting\r\n:param end-date - The day tournament is ending\r\n:param pairs - A pair of two participants\r\n    :param is-circle-trinity - If there's three participants in circle trinity, then True, else False\r\n    :param age-category - Info about pair participants age category\r\n    :param weight-category - Info about pair participants weight category\r\n    :param red/blue - Contestant\r\n        :param last-name - Last name of contestant\r\n        :param first-name - First name of contestant\r\n        :param club - The club contestant is in\r\n\r\n\r\nFor sample purpose only.\r\n'''\r\nsample_data = {\r\n    \"start-date\": \"21.04.2022\",\r\n    \"end-date\": \"23.03.2022\",\r\n    \"pairs\": [\r\n        {\r\n            \"is-circle-trinity\": True,\r\n            \"age-category\": \"8-9\",\r\n            \"weight-category\": \"44\",\r\n            \"red\": {\r\n                \"last-name\": \"Виенко\",\r\n                \"first-name\": \"Богдан\",\r\n                \"club\": \"Саньда\"\r\n            },\r\n\r\n            \"blue\": {\r\n                \"last-name\": \"Рублев\",\r\n                \"first-name\": \"Дмитрий\",\r\n                \"club\": \"Патриот\"\r\n            }\r\n        },\r\n\r\n        {\r\n            \"is-circle-trinity\": False,\r\n            \"age-category\": \"8-9\",\r\n            \"weight-category\": \"44\",\r\n            \"red\": {\r\n                \"last-name\": \"Виенко\",\r\n                \"first-name\": \"Богдан\",\r\n                \"club\": \"Саньда\"\r\n            },\r\n\r\n            \"blue\": {\r\n                \"last-name\": \"Рублев\",\r\n                \"first-name\": \"Дмитрий\",\r\n                \"club\": \"Патриот\"\r\n            }\r\n        }\r\n    ]\r\n}\r\n\r\nclass Participant:\r\n    \"\"\"\r\n    Class that represents info about particular contestant\r\n\r\n    :param last_name: Last name of contestant\r\n    :param first_name: First name of contestant\r\n    :param club: The club contestant is in\r\n    \"\"\"\r\n\r\n    def __init__(self, last_name: str, first_name: str, club: str):\r\n        '''\r\n\r\n        :param last_name: Last name of contestant\r\n        :param first_name: First name of contestant\r\n        :param club: The club contestant is in\r\n        '''\r\n        self.last_name = last_name\r\n        self.first_name = first_name\r\n        self.club = club\r\n\r\n\r\nclass Pair:\r\n    \"\"\"\r\n    Class that represents info about particular pair of contestants\r\n\r\n    :param is-circle-trinity: If there's three participants in circle trinity, then True, else False\r\n    :param age-category: Info about pair participants age category\r\n    :param weight-category: Info about pair participants weight category\r\n    :param red/blue: Contestant\r\n    \"\"\"\r\n\r\n    def __init__(self, is_circle_trinity: bool, age_category: str, weight_category: str,\r\n                 red: Participant, blue: Participant):\r\n        '''\r\n\r\n        :param is_circle_trinity: If there's three participants in circle trinity, then True, else False\r\n        :param age_category: Info about pair participants age category\r\n        :param weight_category: Info about pair participants weight category\r\n        :param red: Contestant\r\n        :param blue: Contestant\r\n        '''\r\n        self.is_circle_trinity = is_circle_trinity\r\n        self.age_category = age_category\r\n        self.weight_category = weight_category\r\n        self.red = red\r\n        self.blue = blue\r\n\r\n\r\nclass ExportDOCX:\r\n    \"\"\"Main DOCX export class, that converts parsed info into DOCX file.\"\"\"\r\n\r\n    __DEFAULT_DATA = {\r\n        \"start-date\": \"\",\r\n        \"end-date\": \"\",\r\n        \"pairs\": []\r\n    }\r\n\r\n    def __init__(self, start_date: str = \"{{start-date}}\", end_date: str = \"{{end-date}}\",\r\n                 data: dict = __DEFAULT_DATA):\r\n        '''\r\n\r\n        :param start_date: The day tournament is starting\r\n        :param end_date: The day tournament is ending\r\n        :param data: Contains data, that will be exported in DOCX file.\r\n        '''\r\n        if __name__ == \"__main__\": #If this file is runned, then base.docx is in the same folder as this file\r\n            self.__document = Document(os_path.abspath(\"base.docx\"))\r\n        else: #Else base.docx is in the same folder as this file, but because this file is imported, you have to do this\r\n            self.__document = Document(os_path.abspath(\"export\\\\base.docx\"))\r\n        self.start_date = start_date\r\n        self.end_date = end_date\r\n        self.__table = self.__document.tables[0] #Only one table is needed\r\n        self.__data = data\r\n\r\n    def __print_dates(self) -> None:\r\n        '''\r\n        Prints dates in the start of exporting file\r\n\r\n        :return: None\r\n        '''\r\n        for paragraph in self.__document.paragraphs:\r\n            for run in paragraph.runs:\r\n                if run.text == \"{{start-date}}\":\r\n                    run.text = self.start_date\r\n\r\n                if run.text == \"{{end-date}}\":\r\n                    run.text = self.end_date\r\n\r\n    def __print_table(self) -> None:\r\n        '''\r\n        Prints containing in __data info into file table\r\n\r\n        :return: None\r\n        '''\r\n        count = 1 #Left table column\r\n\r\n        for pair in self.__data[\"pairs\"]:\r\n            row = self.__table.add_row()\r\n            row.height = Cm(0.6)\r\n            row_cells = row.cells\r\n\r\n            row_cells[0].text = str(count)\r\n            row_cells[0].paragraphs[0].runs[0].font.name = \"Century Gothic\"\r\n            row_cells[0].paragraphs[0].runs[0].font.size = Pt(10)\r\n            row_cells[0].paragraphs[0].alignment = WD_PARAGRAPH_ALIGNMENT.CENTER\r\n\r\n            row_cells[1].text = f\"{pair['age-category']} лет\\n{pair['weight-category']} кг\"\r\n            row_cells[1].paragraphs[0].runs[0].font.bold = True\r\n            row_cells[1].paragraphs[0].runs[0].font.size = Pt(9)\r\n            row_cells[1].paragraphs[0].alignment = WD_PARAGRAPH_ALIGNMENT.LEFT\r\n\r\n            '''RED'''\r\n            row_cells[2].text = f\"{pair['red']['last-name']} {pair['red']['first-name']}\"\r\n            row_cells[2].paragraphs[0].runs[0].font.size = Pt(10)\r\n            row_cells[2].paragraphs[0].alignment = WD_PARAGRAPH_ALIGNMENT.LEFT\r\n\r\n            row_cells[3].text = pair['red']['club']\r\n            row_cells[3].paragraphs[0].runs[0].font.size = Pt(9)\r\n            row_cells[3].paragraphs[0].alignment = WD_PARAGRAPH_ALIGNMENT.CENTER\r\n\r\n            row_cells[4].text = \"Кругов.\" if pair['is-circle-trinity'] else \"\"\r\n            row_cells[4].paragraphs[0].runs[0].font.bold = True\r\n            row_cells[4].paragraphs[0].runs[0].font.size = Pt(8)\r\n            row_cells[4].paragraphs[0].alignment = WD_PARAGRAPH_ALIGNMENT.CENTER\r\n\r\n            '''BLUE'''\r\n            row_cells[5].text = f\"{pair['blue']['last-name']} {pair['blue']['first-name']}\"\r\n            row_cells[5].paragraphs[0].runs[0].font.size = Pt(10)\r\n            row_cells[5].paragraphs[0].alignment = WD_PARAGRAPH_ALIGNMENT.LEFT\r\n            row_cells[6].text = pair['blue']['club']\r\n            row_cells[6].paragraphs[0].runs[0].font.size = Pt(9)\r\n            row_cells[6].paragraphs[0].alignment = WD_PARAGRAPH_ALIGNMENT.CENTER\r\n\r\n            for i in range(7):\r\n                row_cells[i].paragraphs[0].paragraph_format.space_after = Cm(0)\r\n\r\n                '''\r\n                Кирилл или Ярик, если вы это смотрите, я сам не знаю как работает это колесо сансары\r\n                '''\r\n                tc = row_cells[i]._tc\r\n                tcPr = tc.get_or_add_tcPr()\r\n                tcValign = OxmlElement('w:vAlign')\r\n                tcValign.set(qn('w:val'), \"center\")\r\n                tcPr.append(tcValign)\r\n\r\n            count += 1\r\n\r\n    def add_pair(self, pair: Pair) -> None:\r\n        '''\r\n        Adds one pair to __data.\r\n\r\n        :param pair: instance of Pair class.\r\n        :return: None\r\n        '''\r\n\r\n        new_pair = {\r\n            \"is-circle-trinity\": False,\r\n            \"age-category\": \"\",\r\n            \"weight-category\": \"\",\r\n            \"red\": {\r\n                \"last-name\": \"\",\r\n                \"first-name\": \"\",\r\n                \"club\": \"\"\r\n            },\r\n\r\n            \"blue\": {\r\n                \"last-name\": \"Рублев\",\r\n                \"first-name\": \"Дмитрий\",\r\n                \"club\": \"Патриот\"\r\n            }\r\n        }\r\n\r\n        new_pair[\"is-circle-trinity\"] = pair.is_circle_trinity\r\n        new_pair[\"age-category\"] = pair.age_category\r\n        new_pair[\"weight-category\"] = pair.weight_category\r\n\r\n        new_pair[\"red\"][\"last-name\"] = pair.red.last_name\r\n        new_pair[\"red\"][\"first-name\"] = pair.red.first_name\r\n        new_pair[\"red\"][\"club\"] = pair.red.club\r\n\r\n        new_pair[\"blue\"][\"last-name\"] = pair.blue.last_name\r\n        new_pair[\"blue\"][\"first-name\"] = pair.blue.first_name\r\n        new_pair[\"blue\"][\"club\"] = pair.blue.club\r\n\r\n        self.__data[\"pairs\"].append(new_pair)\r\n\r\n\r\n    def export(self, path=\"\") -> None:\r\n        '''\r\n        Congratulations! You're exporting a file. Leave path empty to export in root folder\r\n\r\n        :param path: Path where to save export file\r\n        :return: None\r\n        '''\r\n        self.__print_dates()\r\n        self.__print_table()\r\n        if path != \"\":\r\n            self.__document.save(os_path.abspath(f\"{path}/Состав пар турнир {self.start_date} - {self.end_date}.docx\"))\r\n        else:\r\n            self.__document.save(f\"Состав пар турнир {self.start_date} - {self.end_date}.docx\")\r\n
===================================================================
diff --git a/IO/export/export_docx.py b/IO/export/export_docx.py
--- a/IO/export/export_docx.py	
+++ b/IO/export/export_docx.py	
@@ -1,8 +1,10 @@
-from docx import Document #Main python DOCX class
-from docx.shared import Pt, Cm #Points, Centimeters
-from docx.enum.text import WD_PARAGRAPH_ALIGNMENT #Paragraph alignment
-from docx.oxml.shared import OxmlElement, qn #Magic
-from os import path as os_path #Working with external files
+__all__ = ["ExportPairsDOCX", "Participant", "Pair"]
+
+from docx import Document  # Main python DOCX class
+from docx.shared import Pt, Cm  # Points, Centimeters
+from docx.enum.text import WD_PARAGRAPH_ALIGNMENT  # Paragraph alignment
+from docx.oxml.shared import OxmlElement, qn  # Magic
+from os import path as os_path  # Working with external files
 
 '''
 Sample data.
@@ -62,6 +64,7 @@
     ]
 }
 
+
 class Participant:
     """
     Class that represents info about particular contestant
@@ -72,12 +75,12 @@
     """
 
     def __init__(self, last_name: str, first_name: str, club: str):
-        '''
+        """
 
         :param last_name: Last name of contestant
         :param first_name: First name of contestant
         :param club: The club contestant is in
-        '''
+        """
         self.last_name = last_name
         self.first_name = first_name
         self.club = club
@@ -95,14 +98,14 @@
 
     def __init__(self, is_circle_trinity: bool, age_category: str, weight_category: str,
                  red: Participant, blue: Participant):
-        '''
+        """
 
         :param is_circle_trinity: If there's three participants in circle trinity, then True, else False
         :param age_category: Info about pair participants age category
         :param weight_category: Info about pair participants weight category
         :param red: Contestant
         :param blue: Contestant
-        '''
+        """
         self.is_circle_trinity = is_circle_trinity
         self.age_category = age_category
         self.weight_category = weight_category
@@ -110,8 +113,8 @@
         self.blue = blue
 
 
-class ExportDOCX:
-    """Main DOCX export class, that converts parsed info into DOCX file."""
+class ExportPairsDOCX:
+    """Main DOCX export class, that converts parsed info into DOCX couples file."""
 
     __DEFAULT_DATA = {
         "start-date": "",
@@ -121,27 +124,29 @@
 
     def __init__(self, start_date: str = "{{start-date}}", end_date: str = "{{end-date}}",
                  data: dict = __DEFAULT_DATA):
-        '''
+        """
 
         :param start_date: The day tournament is starting
         :param end_date: The day tournament is ending
         :param data: Contains data, that will be exported in DOCX file.
-        '''
-        if __name__ == "__main__": #If this file is runned, then base.docx is in the same folder as this file
+        """
+        if __name__ == "__main__":  # If this file is run, then base.docx is in the same folder as this file
             self.__document = Document(os_path.abspath("base.docx"))
-        else: #Else base.docx is in the same folder as this file, but because this file is imported, you have to do this
+        else:
+            # Else base.docx is in the same folder as this file,
+            # but because this file is imported, you have to do this
             self.__document = Document(os_path.abspath("export\\base.docx"))
         self.start_date = start_date
         self.end_date = end_date
-        self.__table = self.__document.tables[0] #Only one table is needed
+        self.__table = self.__document.tables[0]  # Only one table is needed
         self.__data = data
 
     def __print_dates(self) -> None:
-        '''
+        """
         Prints dates in the start of exporting file
 
         :return: None
-        '''
+        """
         for paragraph in self.__document.paragraphs:
             for run in paragraph.runs:
                 if run.text == "{{start-date}}":
@@ -151,12 +156,12 @@
                     run.text = self.end_date
 
     def __print_table(self) -> None:
-        '''
+        """
         Prints containing in __data info into file table
 
         :return: None
-        '''
-        count = 1 #Left table column
+        """
+        count = 1  # Left table column
 
         for pair in self.__data["pairs"]:
             row = self.__table.add_row()
@@ -210,12 +215,12 @@
             count += 1
 
     def add_pair(self, pair: Pair) -> None:
-        '''
+        """
         Adds one pair to __data.
 
         :param pair: instance of Pair class.
         :return: None
-        '''
+        """
 
         new_pair = {
             "is-circle-trinity": False,
@@ -248,17 +253,18 @@
 
         self.__data["pairs"].append(new_pair)
 
-
     def export(self, path="") -> None:
-        '''
+        """
         Congratulations! You're exporting a file. Leave path empty to export in root folder
 
         :param path: Path where to save export file
         :return: None
-        '''
+        """
         self.__print_dates()
         self.__print_table()
         if path != "":
             self.__document.save(os_path.abspath(f"{path}/Состав пар турнир {self.start_date} - {self.end_date}.docx"))
         else:
             self.__document.save(f"Состав пар турнир {self.start_date} - {self.end_date}.docx")
+
+# TODO: ExportRefereeProtocolDOCX
